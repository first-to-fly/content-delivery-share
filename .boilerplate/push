#!/usr/bin/env bash

# shellcheck disable=SC1090
source "${BASH_SOURCE[0]%/*}/../lib/bash/core.sh"

function pushBranch() {

  local BRANCH="${1:-}"

  local BRANCH_FILTER="^${BRANCH}-[a-z0-9]\\+$"
  if [[ "${BRANCH}" == "master" ]]; then
    BRANCH_FILTER='^[a-z0-9]\+$'
  fi

  local TO_BRANCH

  git branch --list --remote |
    grep "origin" |
    sed 's|^.*origin/||' |
    grep --invert-match "^${BRANCH}\$" |
    (grep "${BRANCH_FILTER}" || true) |
    while IFS='' read -r TO_BRANCH; do

      echo
      echo -e "${YELLOW_COLOR}==> Pushing ${BRANCH} => ${TO_BRANCH}..."

      local TEMP_DIR
      TEMP_DIR="$(mktemp -d)"

      local PROJECT_DIR="${PWD}"

      (
        set -x
        git clone \
          --reference "${PROJECT_DIR}" \
          --branch "${TO_BRANCH}" \
          "${GIT_REMOTE_URL}" \
          "${TEMP_DIR}"
      )

      cd "${TEMP_DIR}" || return

      set +e

      local GIT_MERGE_OUTPUT
      GIT_MERGE_OUTPUT="$(
        set -x
        git merge "origin/${BRANCH}"
      )"

      set -e

      if [[ "${GIT_MERGE_OUTPUT}" == *"CONFLICT"* ]]; then
        echo "${GIT_MERGE_OUTPUT}" >&2
        echo "Please resolve the conflict, push, and try again..." >&2
        stree "${TEMP_DIR}"
        return 1
      fi

      (
        set -x
        git push
      )

      (
        set -x
        rm -rf "${TEMP_DIR}"
      )

      cd "${PROJECT_DIR}" || return 1

      pushBranch "${TO_BRANCH}"

    done
}

function main() {

  echo -e "${OK_COLOR}==> Pushing published changes from current branch to others..."

  GIT_REMOTE_URL="$(git config --get remote.origin.url)"
  if [[ "${GIT_REMOTE_URL}" != *"bitbucket.org/nabstudio/boilerplates.git" ]]; then
    echo "This script can only run in the boilerplate project." >&2
    return 1
  fi

  GIT_STATUS="$(git status --short --porcelain)"
  if [[ -n "${GIT_STATUS}" ]]; then
    echo "There are uncommitted changes. Please commit them before continue." >&2
    echo >&2
    echo "${GIT_STATUS}" >&2
    return 1
  fi

  GIT_BRANCH="$(git branch -vv | grep "\*" | awk '{print $2}')"
  GIT_UNPUSHED_COMMITS="$(git log "origin/${GIT_BRANCH}..HEAD")"
  if [[ -n "${GIT_UNPUSHED_COMMITS}" ]]; then
    echo "There are unpushed commits. Please push them before continue." >&2
    echo >&2
    echo "${GIT_UNPUSHED_COMMITS}" >&2
    return 1
  fi

  (
    set -x
    git fetch \
      --tags \
      --prune \
      "origin"
  )

  pushBranch "${GIT_BRANCH}"

}

main "$@"
